#!/usr/bin/env python3
#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">3.11"
# dependencies = [
#   "PyGithub",
#   "typer",
#   "yaml",
# ]
# ///
# Author: github.com/danielhoherd
# License: MIT
"""Export and import Github repository labels."""

import github
import typer
import yaml

app = typer.Typer(help=__doc__, invoke_without_command=True)

keepers = ("name", "color", "description")


def get_repo(repo: str, github_token: str) -> github.Repository.Repository:
    try:
        gh = github.Github(login_or_token=github_token)
        gh.per_page = 100
        repo = gh.get_repo(repo)
    except github.GithubException as e:
        if e.status == 403:
            typer.echo(f"Repo {repo} not found or you do not have access!")
            typer.echo("Maybe check that your GITHUB_TOKEN has access token: https://github.com/settings/tokens")
            raise typer.Exit(1)
        if e.status == 404:
            typer.echo(f"Repo {repo} not found!")
            raise typer.Exit(1)
        raise

    return repo


@app.callback()
def main(ctx: typer.Context):
    """Show help if not command is given."""
    if ctx.invoked_subcommand is None:
        typer.echo("No command provided. Showing help text:")
        typer.echo(ctx.get_help())
        raise typer.Exit()


@app.command()
def get(
    repo: str,
    filename: str = typer.Option("labels.yaml", "--filename", "-f"),
    github_token: str = typer.Option(None, envvar="GITHUB_TOKEN"),
):
    """Dump labels from the given repo to a YAML file."""
    gh_repo = get_repo(repo, github_token)
    print(f"Copying labels from {gh_repo.html_url}/labels")
    repo_labels = list(gh_repo.get_labels())
    labels = [{key: label._rawData.get(key) if label._rawData.get(key) else "" for key in keepers} for label in repo_labels]
    with open(filename, "w") as f:
        f.write(yaml.safe_dump(labels, default_flow_style=False))
        print(f"Wrote output to {filename}")


@app.command()
def apply(
    repo: str,
    filename: str = typer.Option("labels.yaml", "--filename", "-f"),
    github_token: str = typer.Option(None, envvar="GITHUB_TOKEN"),
):
    """Apply labels in the given YAML file to the given repo."""
    try:
        with open(filename) as f:
            labels = yaml.safe_load(f)
    except FileNotFoundError:
        typer.echo(f"File {filename} not found!")
        raise typer.Exit(1)

    gh_repo = get_repo(repo, github_token)

    print(f"Applying labels to {gh_repo.html_url}/labels")

    for label in labels:
        if label["description"] is None:
            label["description"] = ""
        try:
            existing_label = gh_repo.get_label(label["name"])
            existing_label.edit(name=label["name"], color=label["color"], description=label["description"])
            print(f"Edited label {label}")
        except github.GithubException as e:
            if e.status == 404:
                gh_repo.create_label(name=label["name"], color=label["color"], description=label["description"])
                print(f"Created label {label}")
            else:
                raise


if __name__ == "__main__":
    app()
