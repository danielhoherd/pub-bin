#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">3.11"
# dependencies = [
#   "cachier",
#   "pendulum",
#   "PyGithub",
#   "rich",
#   "typer",
# ]
# ///
# Author: github.com/danielhoherd
# License: MIT
"""Show a table of info about Github users or orgs.

"export GITHUB_TOKEN=foo" to authenticate for higher API rate limit.
https://github.com/settings/tokens
"""

import datetime
from os import getenv
from sys import exit

import github
import pendulum
import typer
from cachier import cachier
from rich import box
from rich.console import Console
from rich.table import Table

console = Console()
TZ = pendulum.now().tz

gh = github.Github(login_or_token=getenv("GITHUB_TOKEN"))
gh.per_page = 100

app = typer.Typer(
    help=__doc__,
    no_args_is_help=True,
    pretty_exceptions_enable=False,
)


def hash_func(args, kwargs):
    return f"{args} {kwargs}"

@cachier(stale_after=datetime.timedelta(days=1), hash_func=hash_func)
def get_all_repos_for_org(org: github.Organization.Organization) -> list:
    return sorted(org.get_repos(), key=lambda x: x.pushed_at)


@cachier(stale_after=datetime.timedelta(days=1))
def get_all_repos_for_user(user: github.NamedUser.NamedUser) -> list:
    return sorted(user.get_repos(), key=lambda x: x.pushed_at)


@cachier(stale_after=datetime.timedelta(days=1))
def get_all_starred_repos_for_user(user: github.NamedUser.NamedUser) -> list:
    return sorted(user.get_starred(), key=lambda x: x.pushed_at)


@cachier(stale_after=datetime.timedelta(days=7), hash_func=hash_func)
def get_license_for_repo(repo):
    try:
        license = repo.get_license()
        return license.license.name
    except github.GithubException:
        pass
    return ""


def print_repo_table(title: str, repos: list) -> bool:
    table = Table(title=title, show_lines=True, style="grey19", box=box.MINIMAL)
    table.add_column("Index", style="grey42")
    table.add_column("Last push", style="grey42")
    table.add_column("Name", style="light_goldenrod1")
    table.add_column("URL", style="blue3")
    table.add_column("Homepage", style="blue3")
    table.add_column("Description", style="grey93")
    table.add_column("License", style="light_goldenrod1")

    for index, repo in enumerate(repos):
        table.add_row(
            str(index + 1),
            pendulum.instance(repo.pushed_at, tz=TZ).strftime("%F"),
            repo.name,
            repo.html_url,
            repo.homepage,
            repo.description,
            get_license_for_repo(repo),
        )
    console.print(table)


@app.command()
def get_org_repos(org: str):
    gh_org = gh.get_organization(org)

    repos = get_all_repos_for_org(gh_org)

    print_repo_table(title=f"Repositories for {org}", repos=repos)


@app.command()
def get_user_repos(user: str):
    gh_user = gh.get_user(user)

    repos = get_all_repos_for_user(gh_user)

    print_repo_table(title=f"Repositories for {user}", repos=repos)


@app.command()
def get_user_stars(user: str):
    try:
        gh_user = gh.get_user(user)
    except github.GithubException as e:
        print(e)
        exit(1)

    stars = get_all_starred_repos_for_user(gh_user)

    print_repo_table(title=f"Starred repositories for {user}", repos=stars)


if __name__ == "__main__":
    app()
